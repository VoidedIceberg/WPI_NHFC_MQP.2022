// Generated by gencpp from file polhemus_ros_driver/set_sourceRequest.msg
// DO NOT EDIT!


#ifndef POLHEMUS_ROS_DRIVER_MESSAGE_SET_SOURCEREQUEST_H
#define POLHEMUS_ROS_DRIVER_MESSAGE_SET_SOURCEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace polhemus_ros_driver
{
template <class ContainerAllocator>
struct set_sourceRequest_
{
  typedef set_sourceRequest_<ContainerAllocator> Type;

  set_sourceRequest_()
    : source(0)
    , sensor(0)  {
    }
  set_sourceRequest_(const ContainerAllocator& _alloc)
    : source(0)
    , sensor(0)  {
  (void)_alloc;
    }



   typedef int64_t _source_type;
  _source_type source;

   typedef int64_t _sensor_type;
  _sensor_type sensor;





  typedef boost::shared_ptr< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_sourceRequest_

typedef ::polhemus_ros_driver::set_sourceRequest_<std::allocator<void> > set_sourceRequest;

typedef boost::shared_ptr< ::polhemus_ros_driver::set_sourceRequest > set_sourceRequestPtr;
typedef boost::shared_ptr< ::polhemus_ros_driver::set_sourceRequest const> set_sourceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator1> & lhs, const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.sensor == rhs.sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator1> & lhs, const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace polhemus_ros_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f91ead88feb56afe40d9fb44804c0b8";
  }

  static const char* value(const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f91ead88feb56afULL;
  static const uint64_t static_value2 = 0xe40d9fb44804c0b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "polhemus_ros_driver/set_sourceRequest";
  }

  static const char* value(const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 source\n"
"int64 sensor\n"
;
  }

  static const char* value(const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_sourceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::polhemus_ros_driver::set_sourceRequest_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<int64_t>::stream(s, indent + "  ", v.source);
    s << indent << "sensor: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLHEMUS_ROS_DRIVER_MESSAGE_SET_SOURCEREQUEST_H
