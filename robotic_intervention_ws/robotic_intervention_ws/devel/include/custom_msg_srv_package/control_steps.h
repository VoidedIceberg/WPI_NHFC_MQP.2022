// Generated by gencpp from file custom_msg_srv_package/control_steps.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_SRV_PACKAGE_MESSAGE_CONTROL_STEPS_H
#define CUSTOM_MSG_SRV_PACKAGE_MESSAGE_CONTROL_STEPS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg_srv_package
{
template <class ContainerAllocator>
struct control_steps_
{
  typedef control_steps_<ContainerAllocator> Type;

  control_steps_()
    : linear_steps(0)
    , angular_steps(0)  {
    }
  control_steps_(const ContainerAllocator& _alloc)
    : linear_steps(0)
    , angular_steps(0)  {
  (void)_alloc;
    }



   typedef int64_t _linear_steps_type;
  _linear_steps_type linear_steps;

   typedef int64_t _angular_steps_type;
  _angular_steps_type angular_steps;





  typedef boost::shared_ptr< ::custom_msg_srv_package::control_steps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_srv_package::control_steps_<ContainerAllocator> const> ConstPtr;

}; // struct control_steps_

typedef ::custom_msg_srv_package::control_steps_<std::allocator<void> > control_steps;

typedef boost::shared_ptr< ::custom_msg_srv_package::control_steps > control_stepsPtr;
typedef boost::shared_ptr< ::custom_msg_srv_package::control_steps const> control_stepsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_srv_package::control_steps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_srv_package::control_steps_<ContainerAllocator1> & lhs, const ::custom_msg_srv_package::control_steps_<ContainerAllocator2> & rhs)
{
  return lhs.linear_steps == rhs.linear_steps &&
    lhs.angular_steps == rhs.angular_steps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_srv_package::control_steps_<ContainerAllocator1> & lhs, const ::custom_msg_srv_package::control_steps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_srv_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_srv_package::control_steps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_srv_package::control_steps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_srv_package::control_steps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51d557b1f317b489bd121f68c2b0a5e9";
  }

  static const char* value(const ::custom_msg_srv_package::control_steps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51d557b1f317b489ULL;
  static const uint64_t static_value2 = 0xbd121f68c2b0a5e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_srv_package/control_steps";
  }

  static const char* value(const ::custom_msg_srv_package::control_steps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 linear_steps\n"
"int64 angular_steps\n"
;
  }

  static const char* value(const ::custom_msg_srv_package::control_steps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_steps);
      stream.next(m.angular_steps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_steps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_srv_package::control_steps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_srv_package::control_steps_<ContainerAllocator>& v)
  {
    s << indent << "linear_steps: ";
    Printer<int64_t>::stream(s, indent + "  ", v.linear_steps);
    s << indent << "angular_steps: ";
    Printer<int64_t>::stream(s, indent + "  ", v.angular_steps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_SRV_PACKAGE_MESSAGE_CONTROL_STEPS_H
